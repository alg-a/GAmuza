
/////////////////////////////////////////////
// Particle class
// Based on Particle class from: 
// http://www.shiffman.net/teaching/nature/particles/

class 'Particle'

function Particle:__init(l)
	self.birth = ofGetElapsedTimeMillis()
	self.lifecycle = ofRandom(10,500)
	self.counter = 0
	self.randmin = -HALF_PI
	self.randmax = 0
	
	self.r = ofRandom(0,TWO_PI)
	self.acc = ofVec2f(math.cos(self.r)/250,math.sin(self.r)/250)
	
	self.q = ofRandomuf()
	self.r = ofRandom(self.randmin,self.randmax)
	self.vel = ofVec2f(math.cos(self.r)*self.q,math.sin(self.r)*self.q)
	self.loc = ofVec2f(l.x,l.y)
	self.hist = {}
	for i=0, self.lifecycle do
		self.hist[i] = ofVec2f(0,0)
	end
end

function Particle:updateParticle()
	self.vel = self.vel + self.acc
	self.loc = self.loc + self.vel
	if (ofGetElapsedTimeMillis()-self.birth) % 100 == 0 and self.counter < self.lifecycle then
		self.hist[self.counter] = self.loc
		self.counter = self.counter + 1
	end
end

function Particle:drawParticle()
	ofEnableAlphaBlending()
	ofSetColor(245,151,176,135)
	drawArrowHead(self.vel,self.loc,16);
	// draw history path
	ofNoFill()
	ofSetColor(245,151,176,55)
	ofBeginShape()
	for i=0,self.counter-1 do
		ofVertex(self.hist[i].x,self.hist[i].y)
	end
	if self.counter > 0 then
		ofVertex(self.loc.x,self.loc.y)
	end
	ofEndShape(false)
	ofDisableAlphaBlending()
end

function drawArrowHead(_v,_loc,_scale)
	ofPushMatrix()
	_len = _v:length()*_scale
	arrowSize = ofMap(_len,0,10,0,1)*6
	ofTranslate(_loc.x,_loc.y,0)
	ofRotateZ(ofRadToDeg(math.atan2(_v.y,_v.x)))
	ofFill()
	ofLine(0,0,_len-arrowSize,0)
	ofBeginShape()
	ofVertex(_len,0)
	ofVertex(_len-arrowSize, arrowSize/2);
	ofVertex(_len-arrowSize,-arrowSize/2);
	ofEndShape(true)
	ofPopMatrix()
end
