
// A class to describe a population of virtual organisms
// In this case, each organism is just an instance of a DNA object

class 'Population'

function Population:__init(m,num)
	self.mutationRate = m
	self.population = {}
	self.matingPool = {}
	self.generations = 0
	// Keep track of the order of creature's finishing the maze
	self.order = 1

	for i=0,num-1 do
		location = ofVec2f(start.r:getX()+start.r.width/2,start.r:getY()+start.r.height/2)
		self.population[i] = Rocket(location,DNA(dnasize))
	end
end

function Population:live(obs)
	for i=0,table.getn(self.population) do
		if self.population[i]:finished() and not self.population[i]:getStopped() then
			self.population[i]:setFinish(self.order)
			self.order += 1
		end
		self.population[i]:run(obs)
	end
end

// Did anything finish?
function Population:targetReached()
	for i=0,table.getn(self.population) do
		if self.population[i]:finished() then
			return true
		end
	end
	return false
end

// Fill our fitness array with a value for every member of the population
function Population:calcFitness()
	for i=0,table.getn(self.population) do
		self.population[i]:computeFitness()
	end
	self.order = 1
end

// Generate a mating pool
function Population:naturalSelection()
	self.matingPool = nil
	self.matingPool = {}
	
	totalFitness = self:getTotalFitness()

	// Based on fitness, each member will get added to the mating pool a certain number of times
    	// a higher fitness = more entries to mating pool = more likely to be picked as a parent
    	// a lower fitness = fewer entries to mating pool = less likely to be picked as a parent
	index = 0
	for i=0,table.getn(self.population) do
		tempFitness = self.population[i]:getFitness()/totalFitness
		n = math.ceil(tempFitness*50000)
		for j=0,n do
			table.insert(self.matingPool,index,self.population[i])
			index += 1
		end
	end
end

// Create a new generation 
function Population:generate()
	// Refill the population with children from the mating pool
	for i=0,table.getn(self.population) do
		m = math.floor(ofRandom(table.getn(self.matingPool)))
		d = math.floor(ofRandom(table.getn(self.matingPool)))
		mom = self.matingPool[m]
		dad = self.matingPool[d]
		momGenes = mom:getDNA()
		dadGenes = dad:getDNA()
		child = momGenes:crossover(dadGenes)
		child:mutate(self.mutationRate)
		loacation = ofVec2f(start.r:getX()+start.r.width/2,start.r:getY()+start.r.height/2)
		self.population[i] = Rocket(location,child)
	end
	self.generations += 1
end

function Population:getGenerations()
	return self.generations
end

// Find highest fitness for the population
function Population:getTotalFitness()
	total = 0
	for i=0,table.getn(self.population) do
		total += self.population[i]:getFitness()
	end
	return total
end

