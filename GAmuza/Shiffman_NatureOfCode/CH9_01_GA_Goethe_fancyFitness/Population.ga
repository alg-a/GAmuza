
// A class to describe a population of virtual organisms
// In this case, each organism is just an instance of a DNA object

class 'Population'

function Population:__init(p,m,num)
	self.mutationRate = m
	self.population = {}
	self.matingPool = {}
	self.target = p
	self.generations = 0
	self.finished = false
	self.perfectScore = math.floor(math.pow(2,string.len(self.target)))

	for i=0,num-1 do
		self.population[i] = DNA(string.len(self.target))
	end
	self:calcFitness()
end

// Fill our fitness array with a value for every member of the population
function Population:calcFitness()
	for i=0,table.getn(self.population) do
		self.population[i]:computeFitness(self.target)
	end
end

// Generate a mating pool
function Population:naturalSelection()
	self.matingPool = nil
	self.matingPool = {}
	
	maxFitness = 0
	for i=0,table.getn(self.population) do
		if self.population[i].fitness > maxFitness then
			maxFitness = self.population[i].fitness
		end
	end

	// Based on fitness, each member will get added to the mating pool a certain number of times
    	// a higher fitness = more entries to mating pool = more likely to be picked as a parent
    	// a lower fitness = fewer entries to mating pool = less likely to be picked as a parent
	index = 0
	for i=0,table.getn(self.population) do
		tempFitness = ofMap(self.population[i].fitness,0, maxFitness,0,1,true)
		n = math.ceil(tempFitness*100)
		for j=0,n do
			table.insert(self.matingPool,index,self.population[i])
			index += 1
		end
	end
end

// Create a new generation 
function Population:generate()
	// Refill the population with children from the mating pool
	for i=0,table.getn(self.population) do
		a = math.floor(ofRandom(table.getn(self.matingPool)))
		b = math.floor(ofRandom(table.getn(self.matingPool)))
		partnerA = self.matingPool[a]
		partnerB = self.matingPool[b]
		child = partnerA:crossover(partnerB)
		child:mutate(self.mutationRate)
		self.population[i] = child
	end
	self.generations += 1
end

// Compute the current "most fit" member of the population
function Population:getBest()
	worldrecord = 0
	index = 0
	for i=0,table.getn(self.population) do
		if self.population[i].fitness > worldrecord then
			index = i
			worldrecord = self.population[i].fitness
		end
	end
	
	if worldrecord == self.perfectScore then
		self.finished = true
	end
	
	return self.population[index]:getPhrase()
end

function Population:isFinished()
	return self.finished
end

function Population:getGenerations()
	return self.generations
end

// Compute average fitness for the population
function Population:getAverageFitness()
	total = 0
	for i=0,table.getn(self.population) do
		total += self.population[i].fitness
	end
	total /= table.getn(self.population)
	return total
end

function Population:allPhrases()
	everything = ""
	displayLimit = math.min(table.getn(self.population),30)
	
	for i=0, displayLimit do
		everything = everything .. self.population[i]:getPhrase() .. "\n"
	end

	return everything
end

