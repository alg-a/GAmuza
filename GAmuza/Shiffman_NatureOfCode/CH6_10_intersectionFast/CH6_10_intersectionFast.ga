
/* 
   
 GAmuza 0428 examples
 ---------------------
 Shiffman_NatureOfCode/CH6_10_intersectionSlow.ga
 
 This example is one of the series of GAmuza adaptation to
 Daniel Shiffman <Nature of Code> book examples.
 
 Bin-Lattice Spatial Subdivision
 http://www.red3d.com/cwr/papers/2000/pip.pdf
 
 Example demonstrating optimized intersection test for large # of objects
 Each object registers its location in a virtual grid
 Only the objects in neighboring cells on the grid are tested against each other
 
 More info: <http://natureofcode.com/>
 
 created by n3m3da | www.d3cod3.org
 
*/

totalThings = 2000

a = {}
grid = {}
scl = 4
cols = math.ceil(OUTPUT_W/scl)
rows = math.ceil(OUTPUT_H/scl)

function setup()
	for i=0,cols do
		grid[i] = {}
		for j=0,rows do
			grid[i][j] = {}
		end
	end
		
	for i=0, totalThings do
		table.insert(a,i,Thing(ofRandom(OUTPUT_W),ofRandom(OUTPUT_H)))
	end
end

function update()
	
	// Every time through draw clear all the lists
	for i=0,cols do
		for j=0,rows do
			grid[i][j] = nil
			grid[i][j] = {}
		end
	end
	
	// Register every Thing object in the grid according to it's location
	for k,v in pairs(a) do
		a[k].highlight = false
		aX = math.ceil(a[k].x/scl)
		aY = math.ceil(a[k].y/scl)
		// It goes in 9 cells, i.e. every Thing is tested against other Things in its cell
    		// as well as its 8 neighbors
    		for n=-1,1 do
    			for m=-1,1 do
    				localIndex = 0
    				if aX+n >= 0 and aX+n < cols and aY+m >= 0 and aY+m < rows then
    					table.insert(grid[aX+n][aY+m],localIndex,a[k])
    					localIndex += 1
    				end
    			end
    		end
	end
	
	// Run through the Grid
	for i=0,cols do
		for j=0,rows do
			temp = grid[i][j]
			for k,v in pairs(temp) do
				for h,r in pairs(temp) do
					if h != k then
						d = ofDist(temp[k].x,temp[k].y,temp[h].x,temp[h].y)
						if d < temp[k].r/2 + temp[h].r/2 then
							temp[k].highlight = true
						end
					end
				end
			end
		end
	end
	
end

function draw()
    	gaBackground(0.0,1.0)
    
    	for k,v in pairs(a) do
    		a[k]:move()
    		a[k]:render()
    	end
    
end

